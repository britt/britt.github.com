"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var onCreateNode = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref) {
    var node = _ref.node,
        boundActionCreators = _ref.boundActionCreators,
        loadNodeContent = _ref.loadNodeContent;
    var transformObject, createNode, createParentChildLink, content, parsedContent;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            transformObject = function transformObject(obj, id, type) {
              var objStr = JSON.stringify(obj);
              var contentDigest = crypto.createHash(`md5`).update(objStr).digest(`hex`);
              var jsonNode = (0, _extends3.default)({}, obj, {
                id,
                children: [],
                parent: node.id,
                internal: {
                  contentDigest,
                  type
                }
              });
              createNode(jsonNode);
              createParentChildLink({ parent: node, child: jsonNode });
            };

            createNode = boundActionCreators.createNode, createParentChildLink = boundActionCreators.createParentChildLink;

            // We only care about JSON content.

            if (!(node.internal.mediaType !== `application/json`)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return");

          case 4:
            _context.next = 6;
            return loadNodeContent(node);

          case 6:
            content = _context.sent;
            parsedContent = JSON.parse(content);


            if (_.isArray(parsedContent)) {
              parsedContent.forEach(function (obj, i) {
                transformObject(obj, obj.id ? obj.id : `${node.id} [${i}] >>> JSON`, _.upperFirst(_.camelCase(`${node.name} Json`)));
              });
            } else if (_.isPlainObject(parsedContent)) {
              transformObject(parsedContent, parsedContent.id ? parsedContent.id : `${node.id} >>> JSON`, _.upperFirst(_.camelCase(`${path.basename(node.dir)} Json`)));
            }

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function onCreateNode(_x) {
    return _ref2.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = require(`lodash`);
var crypto = require(`crypto`);
var path = require(`path`);

exports.onCreateNode = onCreateNode;