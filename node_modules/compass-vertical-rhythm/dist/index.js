// Generated by CoffeeScript 1.9.0
var adjustFontSizeTo, convertLength, defaults, establishBaseline, linesForFontSize, objectAssign, parseUnit, rhythm, unit, unitLess;

objectAssign = require('object-assign');

convertLength = require('convert-css-length');

parseUnit = require('parse-unit');

unit = function(length) {
  return parseUnit(length)[1];
};

unitLess = function(length) {
  return parseUnit(length)[0];
};

defaults = {
  baseFontSize: '16px',
  baseLineHeight: '24px',
  rhythmUnit: 'rem',
  defaultRhythmBorderWidth: '1px',
  defaultRhythmBorderStyle: 'solid',
  roundToNearestHalfLine: true,
  minLinePadding: '2px'
};

linesForFontSize = function(fontSize, options) {
  var baseLineHeightInPx, convert, fontInPx, lines, minLinePadding;
  convert = convertLength(options.baseFontSize);
  fontInPx = unitLess(convert(fontSize, 'px'));
  baseLineHeightInPx = unitLess(convert(options.baseLineHeight, 'px'));
  minLinePadding = unitLess(convert(options.minLinePadding, 'px'));
  if (options.roundToNearestHalfLine) {
    lines = Math.ceil(2 * fontInPx / baseLineHeightInPx) / 2;
  } else {
    lines = Math.ceil(fontInPx / baseLineHeightInPx);
  }
  if ((lines * baseLineHeightInPx - fontInPx) < (minLinePadding * 2)) {
    if (options.roundToNearestHalfLine) {
      lines += 0.5;
    } else {
      lines += 1;
    }
  }
  return lines;
};

rhythm = function(options) {
  var convert;
  convert = convertLength(options.baseFontSize);
  return function(lines, fontSize, offset) {
    var length, rhythmLength;
    if (lines == null) {
      lines = 1;
    }
    if (fontSize == null) {
      fontSize = options.baseFontSize;
    }
    if (offset == null) {
      offset = 0;
    }
    length = (lines * unitLess(options.baseLineHeight)) - offset;
    length = length + unit(options.baseLineHeight);
    rhythmLength = convert(length, options.rhythmUnit, fontSize);
    if (unit(rhythmLength) === "px") {
      rhythmLength = Math.floor(unitLess(rhythmLength)) + unit(rhythmLength);
    }
    return parseFloat(unitLess(rhythmLength).toFixed(5)) + unit(rhythmLength);
  };
};

establishBaseline = function(options) {
  var convert;
  convert = convertLength(options.baseFontSize);
  return {
    fontSize: (unitLess(options.baseFontSize) / 16) * 100 + "%",
    lineHeight: convert(options.baseLineHeight, 'em')
  };
};

adjustFontSizeTo = function(toSize, lines, fromSize, options) {
  var convert, r;
  if (fromSize == null) {
    fromSize = options.baseFontSize;
  }
  if (unit(toSize) === "%") {
    toSize = unitLess(options.baseFontSize) * (unitLess(toSize) / 100) + "px";
  }
  convert = convertLength(options.baseFontSize);
  fromSize = convert(fromSize, 'px');
  toSize = convert(toSize, 'px', fromSize);
  r = rhythm(options);
  if (lines === "auto") {
    lines = linesForFontSize(toSize, options);
  }
  return {
    fontSize: convert(toSize, options.rhythmUnit, fromSize),
    lineHeight: r(lines, fromSize)
  };
};

module.exports = function(options) {
  var defaultsCopy;
  defaultsCopy = JSON.parse(JSON.stringify(defaults));
  options = objectAssign(defaultsCopy, options);
  return {
    rhythm: rhythm(options),
    establishBaseline: function() {
      return establishBaseline(options);
    },
    linesForFontSize: function(fontSize) {
      return linesForFontSize(fontSize, options);
    },
    adjustFontSizeTo: function(toSize, lines, fromSize) {
      if (lines == null) {
        lines = "auto";
      }
      return adjustFontSizeTo(toSize, lines, fromSize, options);
    }
  };
};
