// Generated by CoffeeScript 1.10.0
module.exports = function(lastKnownScrollY, currentScrollY, props, state) {
  var distanceScrolled, ref, ref1, ref2, scrollDirection;
  if (lastKnownScrollY == null) {
    lastKnownScrollY = 0;
  }
  if (currentScrollY == null) {
    currentScrollY = 0;
  }
  if (props == null) {
    props = {};
  }
  if (state == null) {
    state = {};
  }
  scrollDirection = currentScrollY >= lastKnownScrollY ? "down" : "up";
  distanceScrolled = Math.abs(currentScrollY - lastKnownScrollY);
  if (currentScrollY < props.pinStart && state.state !== "unfixed") {
    return {
      action: "unfix",
      scrollDirection: scrollDirection,
      distanceScrolled: distanceScrolled
    };
  } else if (currentScrollY <= state.height && scrollDirection === "down" && state.state === "unfixed") {
    return {
      action: "none",
      scrollDirection: scrollDirection,
      distanceScrolled: distanceScrolled
    };
  } else if (scrollDirection === "down" && ((ref = state.state) === "pinned" || ref === "unfixed") && currentScrollY > (state.height + props.pinStart) && distanceScrolled > props.downTolerance) {
    return {
      action: "unpin",
      scrollDirection: scrollDirection,
      distanceScrolled: distanceScrolled
    };
  } else if (scrollDirection === "up" && distanceScrolled > props.upTolerance && ((ref1 = state.state) !== "pinned" && ref1 !== "unfixed")) {
    return {
      action: "pin",
      scrollDirection: scrollDirection,
      distanceScrolled: distanceScrolled
    };
  } else if (scrollDirection === "up" && currentScrollY <= state.height && ((ref2 = state.state) !== "pinned" && ref2 !== "unfixed")) {
    return {
      action: "pin",
      scrollDirection: scrollDirection,
      distanceScrolled: distanceScrolled
    };
  } else {
    return {
      action: "none",
      scrollDirection: scrollDirection,
      distanceScrolled: distanceScrolled
    };
  }
};
