// Generated by CoffeeScript 1.9.3
var createStyle, decamelize, generateFontFaceRules, generateHeaderStyles, gray, isString, map, ms, normalize, stn;

ms = require('modularscale');

normalize = require('../normalize');

gray = require('gray-percentage');

isString = require('is-string');

decamelize = require('decamelize');

map = require('lodash/map');

stn = null;

generateFontFaceRules = function(vr, options) {
  var fontFace, i, k, len, properties, ref, s, srcs, styles, v;
  styles = "";
  properties = "";
  if (!((options.fontFaces != null) && options.fontFaces.length > 0)) {
    return styles;
  }
  ref = options.fontFaces;
  for (i = 0, len = ref.length; i < len; i++) {
    fontFace = ref[i];
    srcs = (function() {
      var j, len1, ref1, results;
      ref1 = fontFace.src;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        s = ref1[j];
        results.push("src: " + s + ";");
      }
      return results;
    })();
    for (k in fontFace) {
      v = fontFace[k];
      if (k !== "src") {
        properties += (decamelize(k, '-')) + ": " + v + ";\n";
      }
    }
    styles += "@font-face {\n  " + properties + "\n  " + (srcs.join("\n")) + "\n}";
  }
  return styles;
};

createStyle = function(elements, rules) {
  var elementsStr;
  if (stn != null) {
    elements = map(elements, function(element) {
      return ".typography-theme-" + stn + " " + element;
    });
  }
  elementsStr = elements.join(',');
  return elementsStr + " {\n" + rules + "\n}\n\n";
};

generateHeaderStyles = function(vr, options) {
  var baseFontSize, h1, h2, h3, h4, h5, h6, i, len, maxWidth, modularScale, ref, scale, styles;
  styles = "";
  baseFontSize = options.baseFontSize.slice(0, -2);
  ref = options.modularScales;
  for (i = 0, len = ref.length; i < len; i++) {
    modularScale = ref[i];
    maxWidth = modularScale.maxWidth;
    scale = modularScale.scale;
    h1 = vr.adjustFontSizeTo(ms(3, scale) * baseFontSize + "px");
    h2 = vr.adjustFontSizeTo(ms(2, scale) * baseFontSize + "px");
    h3 = vr.adjustFontSizeTo(ms(1, scale) * baseFontSize + "px");
    h4 = vr.adjustFontSizeTo(ms(2 / 3, scale) * baseFontSize + "px");
    h5 = vr.adjustFontSizeTo(ms(1 / 3, scale) * baseFontSize + "px");
    h6 = vr.adjustFontSizeTo(ms(0, scale) * baseFontSize + "px");
    if (maxWidth) {
      styles += "@media only screen and (max-width: " + maxWidth + ") {\n";
    }
    styles += createStyle(['h1'], "font-size: " + h1.fontSize + ";\nline-height: " + h1.lineHeight + ";");
    styles += createStyle(['h2'], "font-size: " + h2.fontSize + ";\nline-height: " + h2.lineHeight + ";");
    styles += createStyle(['h3'], "font-size: " + h3.fontSize + ";\nline-height: " + h3.lineHeight + ";");
    styles += createStyle(['h4'], "font-size: " + h4.fontSize + ";\nline-height: " + h4.lineHeight + ";");
    styles += createStyle(['h5'], "font-size: " + h5.fontSize + ";\nline-height: " + h6.lineHeight + ";");
    styles += createStyle(['h6'], "font-size: " + h6.fontSize + ";\nline-height: " + h6.lineHeight + ";");
    if (maxWidth) {
      styles += "}";
    }
  }
  return styles;
};

module.exports = function(vr, options, subThemeName, globalOptions) {
  var styles;
  stn = subThemeName;
  styles = "";
  if (subThemeName == null) {
    styles = normalize + "\n\nhtml {\n  box-sizing: border-box;\n  font-size: " + (vr.establishBaseline().fontSize) + ";\n  line-height: " + (vr.establishBaseline().lineHeight) + ";\n  overflow-y: scroll;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  color: " + (gray(options.bodyGray, options.bodyGrayHue)) + ";\n  font-family: " + options.bodyFontFamily + ";\n  font-weight: " + options.bodyWeight + ";\n  word-wrap: break-word;\n}\n\n/* Make image responsive by default */\nimg {\n  max-width: 100%;\n}\n\n";
  }
  if (subThemeName) {
    styles += ".typography-theme-" + subThemeName + " {\n  color: " + (gray(options.bodyGray, options.bodyGrayHue)) + ";\n  font-family: " + options.bodyFontFamily + ";\n  font-weight: " + options.bodyWeight + ";\n  font-size: " + (vr.adjustFontSizeTo(options.baseFontSize, 'auto', globalOptions.baseFontSize).fontSize) + ";\n  line-height: " + (vr.adjustFontSizeTo(options.baseFontSize, 'auto', globalOptions.baseFontSize).lineHeight) + ";\n}";
  }
  styles += createStyle(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'ul', 'ol', 'dl', 'dd', 'p', 'figure', 'pre', 'table', 'fieldset', 'blockquote', 'form', 'noscript', 'iframe', 'img', 'hr'], "margin: 0;\nmargin-bottom: " + (vr.rhythm(1)) + ";\npadding: 0;");
  styles += createStyle(['blockquote'], "margin: " + (vr.rhythm(1)) + " " + (vr.rhythm(2.5)) + ";");
  styles += createStyle(['b', 'strong'], "font-weight: " + options.boldWeight);
  styles += createStyle(['hr'], "background: " + (gray(80, options.bodyGrayHue)) + ";\nborder: none;\nheight: 1px;\nmargin-bottom: calc(" + (vr.rhythm(1)) + " - 1px);");
  styles += createStyle(['ol', 'ul'], "list-style-position: outside;\nmargin-left: " + (vr.rhythm(1)) + ";");
  styles += createStyle(['ul li', 'ol li'], "padding-left: 0;");
  styles += createStyle(['code', 'kbd', 'pre', 'samp'], "font-size: " + (vr.adjustFontSizeTo('85%').fontSize) + ";\nline-height: " + (vr.adjustFontSizeTo('85%').lineHeight) + ";");
  styles += createStyle(["table"], "font-size: " + (vr.adjustFontSizeTo(options.baseFontSize).fontSize) + ";\nline-height: " + (vr.adjustFontSizeTo(options.baseLineHeight).lineHeight) + ";\nwidth: 100%;");
  styles += createStyle(["thead"], "text-align: left;");
  styles += createStyle(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], "color: " + (gray(options.headerGray, options.headerGrayHue)) + ";\nfont-family: " + options.headerFontFamily + ";\nfont-weight: " + options.headerWeight + ";");
  styles += (generateHeaderStyles(vr, options)) + "\n" + (generateFontFaceRules(vr, options));
  return styles;
};
