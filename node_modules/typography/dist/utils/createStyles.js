'use strict';

var _modularscale = require('modularscale');

var _modularscale2 = _interopRequireDefault(_modularscale);

var _normalize = require('../normalize');

var _normalize2 = _interopRequireDefault(_normalize);

var _grayPercentage = require('gray-percentage');

var _grayPercentage2 = _interopRequireDefault(_grayPercentage);

var _decamelize = require('decamelize');

var _decamelize2 = _interopRequireDefault(_decamelize);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stn = null;

var generateFontFaceRules = function generateFontFaceRules(vr, options) {
  var styles = '';
  var properties = '';

  // Return if there's no font-faces defined.
  if (options.fontFaces == null || options.fontFaces.length <= 0) {
    return styles;
  }
  for (var i = 0; i < options.fontFaces.length; i++) {
    var fontFace = options.fontFaces[i];
    var srcs = fontFace.src.map(function (s) {
      return 'src:' + s + ';';
    });
    for (var k in fontFace) {
      var v = fontFace[k];
      if (k !== 'src') {
        properties += (0, _decamelize2.default)(k, '-') + ':' + v + ';\n';
      }
    }
    styles += '@font-face {\n  ' + properties + '\n  ' + srcs.join('\n') + '\n}';
  }

  return styles;
};

var createStyle = function createStyle(elements, rules) {
  if (stn != null) {
    elements = (0, _map2.default)(elements, function (element) {
      return '.typography-theme-' + stn + ' ' + element;
    });
  }

  var elementsStr = elements.join(',');

  return elementsStr + '{' + rules + '}';
};

var generateHeaderStyles = function generateHeaderStyles(vr, options) {
  var styles = '';
  var baseFontSize = options.baseFontSize.slice(0, -2);

  for (var i = 0; i < options.modularScales.length; i++) {
    var modularScale = options.modularScales[i];
    var maxWidth = modularScale.maxWidth;
    var scale = modularScale.scale;


    var h1 = vr.adjustFontSizeTo((0, _modularscale2.default)(4 / 4, scale) * baseFontSize + 'px');
    var h2 = vr.adjustFontSizeTo((0, _modularscale2.default)(3 / 4, scale) * baseFontSize + 'px');
    var h3 = vr.adjustFontSizeTo((0, _modularscale2.default)(2 / 4, scale) * baseFontSize + 'px');
    var h4 = vr.adjustFontSizeTo((0, _modularscale2.default)(1 / 4, scale) * baseFontSize + 'px');
    var h5 = vr.adjustFontSizeTo((0, _modularscale2.default)(0 / 4, scale) * baseFontSize + 'px');
    var h6 = vr.adjustFontSizeTo((0, _modularscale2.default)(-1 / 4, scale) * baseFontSize + 'px');

    if (maxWidth) {
      styles += '@media only screen and (max-width:' + maxWidth + ') {\n';
    }

    styles += createStyle(['h1'], 'font-size:' + h1.fontSize + ';\n        line-height:' + h1.lineHeight + ';');

    styles += createStyle(['h2'], 'font-size:' + h2.fontSize + ';\n        line-height:' + h2.lineHeight + ';');

    styles += createStyle(['h3'], 'font-size:' + h3.fontSize + ';\n        line-height:' + h3.lineHeight + ';');

    styles += createStyle(['h4'], 'font-size:' + h4.fontSize + ';\n        line-height:' + h4.lineHeight + ';');

    styles += createStyle(['h5'], 'font-size:' + h5.fontSize + ';\n        line-height:' + h6.lineHeight + ';');

    styles += createStyle(['h6'], 'font-size:' + h6.fontSize + ';\n        line-height:' + h6.lineHeight + ';');

    if (maxWidth) {
      styles += '}';
    }
  }

  return styles;
};

// options is either the global or sub-theme options
module.exports = function (vr, options, subThemeName, globalOptions) {
  stn = subThemeName;

  // Create function createStyle(elements=string/array, rules=string, subThemeName="")
  // if there's a themeName, each rule is prefixed with that.
  // Don't create global rules for sub-themes.
  //
  var styles = '';

  // Only the global theme gets these styles.
  if (subThemeName == null) {
    styles = '\n      ' + _normalize2.default + '\n      html {\n        box-sizing:border-box;\n        font-size:' + vr.establishBaseline().fontSize + ';\n        line-height:' + vr.establishBaseline().lineHeight + ';\n        overflow-y:scroll;\n      }\n\n      *, *:before, *:after {\n        box-sizing:inherit;\n      }\n\n      body {\n        color:' + (0, _grayPercentage2.default)(options.bodyGray, options.bodyGrayHue) + ';\n        font-family:' + options.bodyFontFamily + ';\n        font-weight:' + options.bodyWeight + ';\n        word-wrap:break-word;\n      }\n\n      /* Make image responsive by default */\n      img {\n        max-width:100%;\n      }\n    ';
  }

  // Create class for sub-theme with rules that override base theme.
  if (subThemeName) {
    styles += '\n      .typography-theme-' + subThemeName + '{\n        color:' + (0, _grayPercentage2.default)(options.bodyGray, options.bodyGrayHue) + ';\n        font-family:' + options.bodyFontFamily + ';\n        font-weight:' + options.bodyWeight + ';\n        font-size:' + vr.adjustFontSizeTo(options.baseFontSize, 'auto', globalOptions.baseFontSize).fontSize + ';\n        line-height:' + vr.adjustFontSizeTo(options.baseFontSize, 'auto', globalOptions.baseFontSize).lineHeight + ';\n      }\n    ';
  }
  // All block elements get one rhythm of bottom margin.
  styles += createStyle(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'ul', 'ol', 'dl', 'dd', 'p', 'figure', 'pre', 'table', 'fieldset', 'blockquote', 'form', 'noscript', 'iframe', 'img', 'hr'], 'margin:0;\n      margin-bottom:' + vr.rhythm(1) + ';\n      padding:0;');

  styles += createStyle(['blockquote'], 'margin:' + vr.rhythm(1) + ' ' + vr.rhythm(2.5) + ';');

  styles += createStyle(['b', 'strong'], 'font-weight:' + options.boldWeight);

  styles += createStyle(['hr'], 'background:' + (0, _grayPercentage2.default)(80, options.bodyGrayHue) + ';\n      border:none;\n      height:1px;\n      margin-bottom:calc(' + vr.rhythm(1) + ' - 1px);');

  styles += createStyle(['ol', 'ul'], 'list-style-position:outside;\n      margin-left:' + vr.rhythm(1) + ';');

  styles += createStyle(['ul li', 'ol li'], 'padding-left:0;');

  styles += createStyle(['code', 'kbd', 'pre', 'samp'], 'font-size:' + vr.adjustFontSizeTo('85%').fontSize + ';\n      line-height:' + vr.adjustFontSizeTo('85%').lineHeight + ';');

  styles += createStyle(['table'], 'font-size:' + vr.adjustFontSizeTo(options.baseFontSize).fontSize + ';\n      line-height:' + vr.adjustFontSizeTo(options.baseLineHeight).lineHeight + ';\n      width:100%;');

  styles += createStyle(['thead'], 'text-align:left;');

  styles += createStyle(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], 'color:' + (0, _grayPercentage2.default)(options.headerGray, options.headerGrayHue) + ';\n      font-family:' + options.headerFontFamily + ';\n      font-weight:' + options.headerWeight + ';');

  styles += generateHeaderStyles(vr, options) + '\n             ' + generateFontFaceRules(vr, options);

  return styles.replace(/(\r\n|\n|\r)/gm, '');
};