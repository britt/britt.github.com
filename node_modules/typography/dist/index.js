// Generated by CoffeeScript 1.9.3
var React, VerticalRhythm, copy, createStyles, createStylesString, isObject, ms, objectAssign, test;

React = require('react');

objectAssign = require('object-assign');

VerticalRhythm = require('compass-vertical-rhythm');

ms = require('modularscale');

isObject = require('isobject');

copy = require('shallow-copy');

createStyles = require('./utils/createStyles');

createStylesString = function(options) {
  var name, ref, styles, theme, vr;
  vr = VerticalRhythm(options);
  styles = createStyles(vr, options);
  if ((options.subThemes != null) && isObject(options.subThemes)) {
    ref = options.subThemes;
    for (name in ref) {
      theme = ref[name];
      vr = VerticalRhythm(theme);
      styles += createStyles(vr, theme, name, options);
    }
  }
  return styles;
};

module.exports = test = function(options) {
  var defaults, name, ref, theme, vr;
  defaults = {
    baseFontSize: '18px',
    baseLineHeight: '28.5px',
    modularScales: [
      {
        scale: 'diminished fourth'
      }, {
        maxWidth: '768px',
        scale: 'minor third'
      }
    ],
    googleFonts: [],
    headerFontFamily: '"Avenir Next", "Helvetica Neue", "Segoe UI", Helvetica, Arial, sans-serif',
    bodyFontFamily: 'georgia, serif',
    headerGray: 20,
    headerGrayHue: 0,
    bodyGray: 20,
    bodyGrayHue: 0,
    headerWeight: 700,
    bodyWeight: 400,
    boldWeight: 700,
    fontFaces: []
  };
  options = objectAssign(defaults, options);
  if ((options.subThemes != null) && isObject(options.subThemes)) {
    ref = options.subThemes;
    for (name in ref) {
      theme = ref[name];
      options.subThemes[name] = objectAssign(copy(options), theme, {
        rhythmUnit: 'px'
      });
    }
  }
  vr = VerticalRhythm(options);
  return {
    options: options,
    GoogleFont: require('./components/GoogleFont')(options),
    TypographyStyle: require('./components/TypographyStyle')(function() {
      return createStylesString(options);
    }),
    rhythm: vr.rhythm,
    createStyles: function() {
      return createStylesString(options);
    },
    fontSizeToPx: vr.adjustFontSizeTo,
    fontSizeToMS: function(scaler) {
      var baseFont, newFontSize;
      baseFont = options.baseFontSize.slice(0, -2);
      newFontSize = ms(scaler, options.modularScales[0]) * baseFont + "px";
      return vr.adjustFontSizeTo(newFontSize);
    },
    injectStyles: function() {
      var node, styleNode;
      if (typeof document !== "undefined" && document !== null) {
        if (document.getElementById('typography.js') != null) {
          styleNode = document.getElementById('typography.js');
          return styleNode.innerHTML = createStylesString(options);
        } else {
          node = typeof document !== "undefined" && document !== null ? document.createElement('style') : void 0;
          node.id = "typography.js";
          node.innerHTML = createStylesString(options);
          return document.head.appendChild(node);
        }
      }
    }
  };
};
