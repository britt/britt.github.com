
/* Mixins
   ========================================================================== */

// Font-size
@mixin font-size($number) {
  font-size: #{ $number * $base + 'px'};
  font-size: #{ $number + 'rem'};
}

// Margin-top
@mixin margin-top($number) {
  margin-top: #{ $number * $leading + 'px'};
  margin-top: #{ $number * $leading-rem + 'rem'};
}

// Margin-bottom
@mixin margin-bottom($number) {
  margin-bottom: #{ $number * $leading + 'px'};
  margin-bottom: #{ $number * $leading-rem + 'rem'};
}

// Margin
@mixin margin($top, $right, $bottom:null, $left:null) {
  @if $left == null and $bottom == null {
    margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'};
    margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'};
  } @else if $left == null or $left == $right {
    margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'};
    margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'};
  } @else {
    margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'} #{ $left * $leading + 'px'};
    margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'} #{ $left * $leading-rem + 'rem'};
  }
}

// padding
@mixin padding($top, $right, $bottom:null, $left:null) {
  @if $left == null and $bottom == null {
    padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'};
    padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'};
  } @else if $left == null or $left == $right {
    padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'};
    padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'};
  } @else {
    padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'} #{ $left * $leading + 'px'};
    padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'} #{ $left * $leading-rem + 'rem'};
  }

  // padding-top: #{ $top * $leading + 'px'};
 //    padding-top: #{ $top * $leading-rem + 'rem'};
 //    padding-right: #{ $right * $leading + 'px'};
 //    padding-right: #{ $right * $leading-rem + 'rem'};
  // padding-bottom: #{ $bottom * $leading + 'px'};
 //    padding-bottom: #{ $bottom * $leading-rem + 'rem'};
 //    padding-left: #{ $left * $leading + 'px'};
 //    padding-left: #{ $left * $leading-rem + 'rem'};
}

@mixin padding-equal($number) {
  padding: #{ $number * $leading + 'px'};
  padding: #{ $number * $leading-rem + 'rem'};
}

// Line-height
@mixin line-height($number) {
  line-height: #{ $number * $leading + 'px'};
  line-height: #{ $number * $leading-rem + 'rem'};
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);  
  }
}
