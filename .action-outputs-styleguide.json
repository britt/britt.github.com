{
  "style-guide": "# Documentation Style Guide\n\n## Project Summary\n\nProject: \"Hi. Welcome to brittcrawford.com.\" is a small personal website built with Hugo (theme: hugo-coder). At present it functions like a business-card: a list of links and a short non-committal description. The project is low-complexity but may expand to more content. Documentation in the repository includes content pages (content/*), theme documentation (themes/hugo-coder/docs/*), example site content (themes/hugo-coder/exampleSite/content/*), archetypes, static assets (images and files), and some custom layouts (layouts/index.html). The primary audience for documentation is the site owner and any future contributors or content authors who will add or edit markdown content, manage front matter, and publish via Hugo. The documentation types present include site content pages, theme docs (guides/FAQ/config), example posts, API-like content patterns (structured metadata and examples), tables, code examples, and a table of contents usage pattern. Technical complexity is low-to-moderate: authors must know basic Markdown, Hugo front matter, and simple site structure conventions. Writing patterns observed: Title-front-matter at top of most content files; filenames reflect content slugs; consistent use of top-level content sections (e.g., 'about', 'contact', 'projects'); theme docs use conventional headings like \"Quick Start\", \"Multilingual Mode\", \"Home\", \"FAQ\", \"Contributing\". Metadata usage is consistent: the most common front-matter fields are title (35 occurrences), path (34), date (29), and draft (1).\n\n## Context\n\n**Project:** Hi. Welcome to brittcrawford.com.\n**Description:** This is my personal website. Right now it just has a business card-like list of links and a non-committal description. I might add more to it in the future.\n**Publishing System:** Hugo\n\n## Primary Documentation Goals\n\n## Writing Rules\n\n### Core Principles\n- **Be concise** - Use the minimum words necessary\n- **Be practical** - Focus on actionable information\n- **Be example-driven** - Show working code for every concept\n- **Be consistent** - Match existing documentation patterns\n\n### Tone Guidelines\n\n#### Default Tone (Technical Users)\n- Direct and practical language\n- Assume familiarity with TypeScript, package managers, CLI\n- Use technical jargon and shorthand\n- Focus on code examples over explanations\n- Avoid marketing language or benefit statements\n\n#### Non-Technical User Adjustments\nWhen explicitly writing for non-technical users:\n- Explain what each command does and why\n- Spell out abbreviations and technical terms\n- Provide simpler code examples with explanations\n- Include more step-by-step guidance\n- Link to additional learning resources\n\n### Publishing System Requirements\nHugo-specific requirements and examples\n\nRequired front matter fields (base required set observed in repository):\n- title (string) — human-readable page title\n- path (string) — site path / URL fragment for the page\n- date (ISO 8601) — publication or creation date\n\nRecommended optional fields (commonly useful):\n- draft (boolean) — true to keep page unpublished\n- description (string) — short summary for listing/SEO\n- tags (array) — tag list\n- categories (array) — category list\n- slug (string) — URL slug override\n- aliases (array) — previous URLs for redirects\n\nExact front matter template to copy/paste\n\n---\ntitle: \"Your Page Title\"\npath: \"path/to/page\"\ndate: 2025-09-29T12:00:00Z\n# Optional fields\n# draft: false\n# description: \"One-line summary for lists and SEO\"\n# tags: [tag1, tag2]\n# categories: [category]\n# slug: \"custom-slug\"\n# aliases: [\"/old-path/\"]\n---\n\nNotes on front matter usage\n- Place the YAML front matter at the top of every content file that will be rendered by Hugo. Files without front matter may still render but will not have structured metadata.\n- title and path must be present for new content pages. date should be included for posts or dated content. draft defaults to false if omitted, but include it explicitly when preparing drafts.\n- Use ISO 8601 format for date (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ). Example: 2024-06-13T09:00:00Z\n\nTable of contents and TOC rendering\n- Hugo supports .TableOfContents in templates. For author-controlled TOC, include a \"Table of contents\" heading in content. To ensure consistent TOC rendering, prefer one of these approaches:\n  - Template approach (site-level): use the Hugo variable in templates/layouts where you want the TOC to appear:\n\n    {{ .TableOfContents }}\n\n  - Content-level approach (if a shortcode exists in this repo/theme): use a toc shortcode if available:\n\n    {{< toc >}}\n\n  - If neither is available, include a manual TOC section and maintain it by hand.\n\nCode block and syntax format\n- Use fenced code blocks with language identifiers for syntax highlighting. Example:\n\n```bash\n# Shell example\nhugo server -D\n```\n\n```js\n// JavaScript example\nconsole.log('Hello, world!')\n```\n\nExamples of API-style documentation\n- Use headings for Request, Response, and Examp",
  "style-guide-path": "/home/runner/work/britt.github.com/britt.github.com/.doc.holiday/styleguide.md",
  "summary": "Style guide generated from 127 files with 27 sections covering documentation patterns and conventions."
}