{
  "style-guide": "# Documentation Style Guide\n\n## Project Summary\n\nProject: \"Hi. Welcome to brittcrawford.com.\" — a personal website built with Hugo. Purpose: a lightweight personal site / virtual business card listing links and a short description, with potential to expand (projects, recipes/cocktails, posts). Audience: site author and potential contributors who will add or edit content (Markdown pages, project entries, recipe pages). Technical details: Hugo static site generator with the hugo-coder theme present. Content includes standard Markdown pages under content/, archetypes/ for default front matter, theme docs, static assets (images, favicon), and custom layouts. The site uses front matter metadata on nearly every page (title, path, date commonly present), includes a table of contents on pages, code examples, API-like documentation patterns (structured content), and tables. The technical complexity is low-to-moderate for content writers but requires consistent Hugo front-matter and simple Markdown conventions.\n\n## Context\n\n**Project:** Hi. Welcome to brittcrawford.com.\n**Description:** This is my personal website. Right now it just has a business card-like list of links and a non-committal description. I might add more to it in the future.\n**Publishing System:** Hugo\n\n## Primary Documentation Goals\n\n## Writing Rules\n\n### Core Principles\n- **Be concise** - Use the minimum words necessary\n- **Be practical** - Focus on actionable information\n- **Be example-driven** - Show working code for every concept\n- **Be consistent** - Match existing documentation patterns\n\n### Tone Guidelines\n\n#### Default Tone (Technical Users)\n- Direct and practical language\n- Assume familiarity with TypeScript, package managers, CLI\n- Use technical jargon and shorthand\n- Focus on code examples over explanations\n- Avoid marketing language or benefit statements\n\n#### Non-Technical User Adjustments\nWhen explicitly writing for non-technical users:\n- Explain what each command does and why\n- Spell out abbreviations and technical terms\n- Provide simpler code examples with explanations\n- Include more step-by-step guidance\n- Link to additional learning resources\n\n### Publishing System Requirements\nHugo-specific publishing requirements and exact templates\n\nRequired metadata fields (minimum set observed and required for consistent publishing):\n- title (string) — displayed page title; required\n- path (string) — canonical path or relative URL used by site; highly used in repo\n- date (ISO 8601 string) — creation or publication date; used by listing and sorting\n\nRecommended/optional fields (use where relevant):\n- draft (boolean) — true for work-in-progress pages\n- description (string) — short summary for SEO and link previews\n- tags (array) — content tags\n- categories (array) — content categories\n- layout (string) — if a page needs a custom layout\n- featured_image / image (string) — path to an image in static/img\n- toc (boolean) — if your theme supports toggling table-of-contents per page (check theme docs)\n\nExact front-matter template to copy and use for new content files (YAML style):\n---\n# EXACT front matter template here\ntitle: \"Page Title\"\npath: \"/path/\"\ndate: \"2025-09-29T12:00:00Z\"\ndraft: false\n# Optional fields:\n# description: \"Short one-line description\"\n# tags: [\"example\",\"tag\"]\n# categories: [\"projects\"]\n# layout: \"single\"\n# image: \"/img/example.png\"\n# toc: true\n---\n\nNotes and publishing rules:\n- Always include the YAML front matter block at the top of every content file. Use the exact fields above for required metadata. Use double quotes for values containing punctuation.\n- Use ISO 8601 date strings (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ) for date fields. Avoid locale-specific formats.\n- Set draft: true for pages not ready for production. Remove or set draft: false before merging to main/publishing branch.\n- When adding a new content type, also add an archetype in archetypes/ mirroring the front matter template to speed authoring.\n\nCode blocks and language tagging:\n- Use fenced code blocks with a language identifier: ```js, ```bash, ```python, ```html, etc.\n- Small inline code: use single backticks `like this`.\n\nExample of a code block to include in docs:\n```bash\n# Build and serve locally\nhugo server -D\n```\n\nAPI / structured examples and tables:\n- Use Markdown tables for simple tabular content:\n| Field | Type | Description |\n|-------|------|-------------|\n| title | string | Page title |\n- Use consistent column headers and avoid extremely wide tables.\n\nTable of Contents (TOC):\n- The site uses a TOC feature. Preferred approach:\n  - Where possible, rely on the theme/template to render a TOC from headings (Hugo provides .TableOfContents in templates).\n  - If you need an inline TOC in content, check if the theme provides a toc shortcode (e.g., {{< toc >}}). If not, request a template change to render {{ .TableOfContents }} in the single.html layout.\n- Recommended front matter flag if theme supports it: toc: true\n\nPublishing workflow:\n- Create content unde",
  "style-guide-path": "/home/runner/work/britt.github.com/britt.github.com/.doc.holiday/styleguide.md",
  "summary": "Style guide generated from 127 files with 27 sections covering documentation patterns and conventions."
}