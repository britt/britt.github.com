#!/usr/bin/env node --harmony 

const FS = require('fs')
const TOML = require('toml-js')
const request = require('superagent')
const moment = require('moment')
const program = require('commander')

function quit() {
  process.exit(0)
}

function thereIsNoTry(callback) {
  return (err, data) => {
    if(err) {
      process.stderr.write(err.toString())
      process.exit(1)
    } else {
      callback(data)
    }
  }
}

function parseWeek(dateString) {
  const m = moment(dateString, 'YYYY-MM-DD')
  return m.startOf('week')
}

function parseDateLiked(article) {
  return moment(article['date_liked'], "MMMM DD, YYYY at hh:mmA")
}

function fetchReadingData(url, callback) {
  request.get(url).end(thereIsNoTry((res) => {
    const data = JSON.parse(res.text)
    callback(data.result)
  }))
}

function saveWeeklyReads(startOfWeek, data) {
  const nextWeek = moment(startOfWeek).add(1, 'week').subtract(1, 'minute')

  const thisWeeksReads = data.filter((item) => {
    const date_liked = parseDateLiked(item)
    return date_liked.isBetween(startOfWeek, nextWeek)
  })

  const readingData = {
    title: "Reading " + startOfWeek.format("MMMM Do, YYYY"),
    week: startOfWeek.format("MMMM Do, YYYY"),
    articles: thisWeeksReads
  }

  const outputPath = "./pages/reading/" + startOfWeek.format("YYYY-MM-DD")
  const outputFileName = outputPath + "/index.json"
  
  const saveReads = () => {
    FS.writeFile(outputFileName, JSON.stringify(readingData), thereIsNoTry(quit))
  }

  FS.access(outputPath, FS.F_OK, (err) => {
    if(err) {
      FS.mkdir(outputPath, (err, data) => {
        if(err && /EEXIST/.match(err.toString()) === null) {
          process.stderr.write(err.toString())
          process.exit(1)
        } else {
          saveReads()
        }
      })
    } else {
      saveReads()
    }
  })
}

function saveAllReads(data) {
  const weeks = data.reduce((acc, item) => {
    const week = parseDateLiked(item).startOf('week')
    if(!acc.includes(week)) {
      acc.push(week)
    }
    return acc
  }, [])

  weeks.forEach((week) => saveWeeklyReads(week, data))
}

function fetchAndSaveWeeklyReads(startOfWeek, data) {
  const config = TOML.parse(data)
  const url = config.reading.api_url
  fetchReadingData(url, saveWeeklyReads.bind(this, startOfWeek))
}

function fetchAndSaveAll(data) {
  const config = TOML.parse(data)
  const url = config.reading.api_url
  fetchReadingData(url, saveAllReads)
}

program.version('0.0.1')
  .option('-a, --all', 'Fetch all')
  .option('-w, --week <week>', 'Fetch data for a given week', parseWeek)
  .parse(process.argv)

var action = fetchAndSaveWeeklyReads.bind(this, moment().startOf('week'))

if(program.all) {
  action = fetchAndSaveAll
} else if(program.week) {
  action = fetchAndSaveWeeklyReads.bind(this, program.week)
}

FS.readFile('config.toml', thereIsNoTry(action))


