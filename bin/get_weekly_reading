#!/usr/bin/env node
'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _tomlJs = require('toml-js');

var _tomlJs2 = _interopRequireDefault(_tomlJs);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function feedback(msg) {
  return process.stdout.write(msg);
}

function saveWeek(week, articles) {
  var data = {
    'title': 'Reading ' + week.format('MMMM Do, YYYY'),
    'week': week.format('MMMM Do, YYYY'),
    articles: articles
  };

  var outputPath = _path2.default.join(process.cwd(), 'pages/reading/', week.format('YYYY-MM-DD'));
  var outputFileName = outputPath + '/index.json';

  _fs2.default.access(outputPath, _fs2.default.F_OK, function (err) {
    if (err) {
      try {
        _fs2.default.mkdirSync(outputPath, function (err, data) {
          if (err && err.toString().match(/EEXIST/) === null) {
            process.stderr.write(err.toString());
            process.exit(1);
          }
        });
      } catch (e) {
        console.log('incorrectly tried to recreate an existing directory', err);
      }
    }

    _fs2.default.writeFileSync(outputFileName, JSON.stringify(data));
  });
}

var tempFileName = _path2.default.join(_os2.default.tmpdir(), 'reading.json');

function Main() {
  // load config
  var cfgData = _fs2.default.readFileSync(_path2.default.join(__dirname, '..', 'config.toml'));
  var config = _tomlJs2.default.parse(cfgData);

  // fetch reading data
  var ssId = config.reading.google_sheet_id;
  var start = (0, _moment2.default)();
  feedback('Fetching reading data...');
  _child_process2.default.execSync('gsjson ' + ssId + ' ' + tempFileName);
  feedback('complete ' + (0, _moment2.default)().diff(start, 'seconds', true) + 's\n');

  // parse reading data
  start = (0, _moment2.default)();
  feedback('Parsing articles...');
  var articles = JSON.parse(_fs2.default.readFileSync(tempFileName));
  // accumulate and persist
  var currentWeek = null;
  var weeksArticles = [];
  articles.forEach(function (article) {
    var week = (0, _moment2.default)(article['date_liked'], 'MMMM DD, YYYY at hh:mmA').startOf('week');
    if (!week.isSame(currentWeek)) {
      if (currentWeek !== null && weeksArticles.length > 0) {
        saveWeek(currentWeek, weeksArticles);
        feedback('Saved week of ' + currentWeek.format('MMMM Do, YYYY') + (' ' + weeksArticles.length + ' articles.\n'));
      }
      currentWeek = week;
      weeksArticles = [];
    }

    weeksArticles.push(article);
  });
  // save the most recent week
  if (weeksArticles.length > 0) {
    saveWeek(currentWeek, weeksArticles);
    feedback('Saved week of ' + currentWeek.format('MMMM Do, YYYY') + (' ' + weeksArticles.length + ' articles.'));
  }
  feedback('complete ' + (0, _moment2.default)().diff(start, 'seconds', true) + 's\n');
}

Main();
